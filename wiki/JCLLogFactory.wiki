#summary Cached JCL LogFactory instances

= Introduction =

[http://commons.apache.org/logging/ Commons logging] (formerly known as Jakarta Commons Logging, or JCL for short) has often been blamed for causing class loader leaks, and competing APIs such as SLF4J have tried to derive some of their legitimacy from these alleged flaws in JCL. However, there is really only one setup where using JCL may cause a class loader leak. In fact, this occurs when both of the following two conditions are met:
  * Commons logging is installed into the server runtime although the application server has no explicit support for this configuration. Indeed most servers have a mechanism that allows to add arbitrary JARs to a shared class loader from were they become visible to all applications (or a configurable subset of applications). E.g. in Tomcat 6.0 this is done by placing the JARs into the `$CATALINA_HOME/lib` directory.
  * The application either uses parent-first class loading or it uses parent-last class loading and the JCL library is *not* included in the application itself. It should be noted that this situation is actually in contradiction with the recommendations made by the J2EE specification:
    * Section SRV.9.7.2 of the Java Servlet Specification Version 2.4 recommends "that the application class loader be implemented so that classes and resources packaged within the WAR are loaded in preference to classes and resources residing in container-wide library JARs." This basically implies that parent-last class loading should be used (with special provisions for classes in `java.*` and `javax.*`).
    * Not packaging the JCL library in the application would mean that the application makes use of an API that is not part of the J2EE specification (and that a container is not required to provide) but doesn't contain the necessary classes. This makes the application dependent on a particular server product or configuration.
